<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:batch="http://www.springframework.org/schema/batch" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:p="http://www.springframework.org/schema/p" xmlns:util="http://www.springframework.org/schema/util"
	   xsi:schemaLocation="http://www.springframework.org/schema/batch
		http://www.springframework.org/schema/batch/spring-batch-2.2.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

	<import resource="classpath:config/db-config.xml" />



	<bean id="xmlItemWriter" class="org.springframework.batch.item.xml.StaxEventItemWriter" scope="step">
		<property name="resource" value="file:#{jobParameters['outputFilePath']}" />
		<property name="marshaller" ref="reportMarshaller" />
		<property name="rootTagName" value="MSG" />
		<property name="overwriteOutput" value="true" />
	</bean>

    <bean id="dbItemReader" class="org.mybatis.spring.batch.MyBatisPagingItemReader" scope="step">
        <property name="sqlSessionFactory" ref="sqlSessionFactory" />
        <property name="queryId" value="com.brilliance.batch.mapper.db.BizCanvasMapper.getMaxWorkDate" />
		<property name="parameterValues">
			<map>
				<entry key="workdate" value="#{jobParameters['workdate']}"></entry>
				<entry key="bizcode" value="#{jobParameters['bizcode']}"></entry>
			</map>
		</property>
    </bean>


	<bean id="reportMarshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
		<property name="marshallerProperties">
			<map>
				<!-- format : 默认 Boolean.false(Compact format)  -->
				<entry key="jaxb.formatted.output">
					<value type="java.lang.Boolean">true</value>
				</entry>
				<!-- xml Declaration :默认 Boolean.false -->
				<entry key="jaxb.fragment">
					<value type="java.lang.Boolean">false</value>
				</entry>
				<!-- xml encoding declaration: 默认 UTF-8 -->
				<entry key="jaxb.encoding" value="GBK"/>
			</map>
		</property>
		<property name="classesToBeBound">
			<list>
				<value>com.brilliance.batch.model.BizCanvas</value>
			</list>
		</property>
	</bean>


	<batch:job id="readTable">
		<batch:step id="step">
			<batch:tasklet task-executor="taskExecutor" throttle-limit="50"  start-limit="3">
				<batch:chunk reader="dbItemReader" writer="xmlItemWriter" processor="XmlitemProcessor" commit-interval="10">
				</batch:chunk>
			</batch:tasklet>
		</batch:step>
	</batch:job>

    <bean id="taskExecutor"
          class="org.springframework.core.task.SimpleAsyncTaskExecutor">
    </bean>





    <!-- 定时任务 开始 -->
    <bean id="ledgerJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject">
            <!-- 定时执行的类 -->
            <ref bean="quartzLedgerJob" />
        </property>
        <property name="targetMethod">
            <!-- 定时执行的类方法 -->
            <value>execute</value>
        </property>
    </bean>

    <bean id="ledgerCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean" >
        <!-- 这里不可以直接在属性jobDetail中引用taskJob，因为他要求的是一个jobDetail类型的对象，所以我们得通过MethodInvokingJobDetailFactoryBean来转一下 -->
        <property name="jobDetail" >
            <ref bean="ledgerJobDetail" />
        </property>
        <!--在每天下午18点到下午18:59期间的每1分钟触发  -->
        <!--在每天上午10点40分准时触发  -->
        <property name="cronExpression" >
            <!-- <value>0 * 15 * * ?</value> -->
            <!--<value>0 45 10 * * ? * </value>-->
            <value>0/5 * * * * ? * </value>
        </property>

    </bean>

    <!-- 触发器工厂，将所有的定时任务都注入工厂-->
    <bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <!-- 添加触发器 -->
        <property name="triggers">
            <list>
                <!-- 将上面定义的测试定时任务注入（可以定义多个定时任务，同时注入）-->
                <ref local="ledgerCronTrigger" />
            </list>
        </property>
    </bean>


</beans>